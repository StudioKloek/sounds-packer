import t from"chalk";import e from"fs-extra";import{getAudioDurationInSeconds as o}from"get-audio-duration";import r from"globby";import n from"hasha";import a from"log-symbols";import s from"ora";import i from"path";import c from"camelcase";import l from"get-value";import f from"pupa";import p from"set-value";import u from"uppercamelcase";import m from"object.defaults";import g from"sane";import{debounce as d}from"throttle-debounce";function h(t,e){let o=(t=`${t}`).replace(`${e}/`,"").split("/").map((t=>{return/^\d/.test(e=t)&&(e=`s${e}`),e.replace(/(\W)/g,"_").replace(/_{2,}/g,".").replace(/^_/,"").replace(/_$/,"");var e})),r=o.pop();r=r.toUpperCase(),o=o.map((t=>c(t)));let n=e.split("/");return n=n.slice(n.length-(1===n.length?1:2)),n.push("sounds"),n=u(n.join("-")),o.length>0?[n,t=(t=o.join(".")).replace(/(\W^\.)/g,"").replace(/\.{2,}/g,".").replace(/^\./,"").replace(/\.$/,""),r].join("."):[n,r].join(".")}function y(t){const e=[];for(const o of Object.keys(t))Object.prototype.hasOwnProperty.call(t,o)&&e.push([o,t[o]]);e.sort(((t,e)=>{const o=t[0],r=e[0];return o<r?-1:o>r?1:0}));const o={};for(const t of e)o[t[0]]=t[1];return o}async function w(t,o,r,n){const a=l(n,"scriptDirectory",r.scriptDirectory),s=function(t,e){let o="";const r=[];for(const e of Object.keys(t)){const n=y(t[e]);let a=JSON.stringify(n,null,2);a=a.replace(/"([^"()]+)":/g,"$1:"),o=`${o}${f("export const {assetName} = {assetData};",{assetName:e,assetData:a})}\n`,r.push(e)}return o=`${o}${f("export const {assets}LoaderInfo = {\n  assetName : '{assetName}',\n  assets : {assets},\n  numberOfSounds : {numberOfSounds},\n  type: 'sounds'\n};",{assets:r,assetName:e.fileName,numberOfSounds:e.numberOfSounds})}\n`,o}(function(t,e){const o=e,r={};for(const e of t||[]){const t={id:e.hash,duration:e.duration,name:e.name};p(r,h(i.join(e.path,e.name),o),t)}return r}(o,t),{fileName:t,numberOfSounds:o.length}),c=function(t,e){const o=t.split("/"),r=o.pop();return o.length<2&&o.push(r),t=o.join("/"),`${i.join(e,t)}/assets/sounds-${r}.ts`}(t,a);await e.outputFile(c,s)}const $={},D={};async function b(c,l){let f,p;if(Array.isArray(c)?(f=c[0],p=c[1]):f=c,$[f])return console.log(a.warning,t.yellow("Allready packing, starting again afterwards...")),void(D[f]=!0);$[f]=!0;const u=s(`Packing ${f}`).start();try{if(!async function(t,a,s){const c=i.join(a.sourceDirectory,t),l=await r(`${c}/**/*.wav`),f=[];for(const t of l){let e=await n.fromFile(t,{algorithm:"md5"});e=e.slice(0,10);let r=await o(t);r=Math.round(1e4*r)/1e4;const s=t.replace(`${c}/`,""),l={filename:i.basename(s,".wav"),path:s.replace(`${i.basename(s)}`,""),duration:r,hash:e};let p=l.filename;for(const t of a.prefixes)p.startsWith(t)&&(p=p.slice(t.length));l.name=p,f.push(l)}if(!await async function(t,o,r){const n=i.join(r.sourceDirectory,t);for(const t of o)try{for(const o of r.formats)await e.copy(`${i.join(n,t.path,t.filename)}.${o}`,`${i.join(r.targetDirectory,t.hash)}.${o}`)}catch(t){return console.log(t),!1}return!0}(t,f,a))return!1;return await w(t,f,a,s),!0}(f,l,p))return void u.fail(`Error packing ${f}`)}catch(t){return u.fail(`Error packing ${f}`),void console.error(a.warning,t.message)}$[f]=!1,D[f]?(D[f]=!1,u.warn("Needs repacking, something changed while packing..."),await b(c,l)):u.succeed(`Done packing ${f}`)}async function j(e,o){return new Promise((r=>{let n,s={};if(Array.isArray(e)?(n=e[0],s=e[1]):n=e,!0!==o.watch&&!0!==s.watch||!1===s.watch)return void r();const c=d(o.watchDelay,(()=>{b(e,o)})),l=g(`${i.join(o.sourceDirectory,n)}`,{glob:["**/*.png","**/*.jpg"]});l.on("ready",(()=>{console.log(a.info,t.blue(`Started watching ${n} with a delay of ${o.watchDelay/1e3}s`)),r()})),l.on("change",c),l.on("add",c),l.on("delete",c)}))}async function k(o){const r=await async function(t){const o=s(`Reading settings from ${t}...`).start();let r={};try{const o=await e.readJSON(t);r=l(o,"sounds",{}),r=m(r,{sourceDirectory:"./assets/",scriptDirectory:"./assets/converted/",targetDirectory:"./assets/converted/",watch:!1,watchDelay:500,prefixes:[],formats:["ogg","mp3"],directories:[]}),r.prefixes.sort(((t,e)=>t<e?1:t>e?-1:0))}catch(e){return console.log(e),o.fail(`Could not load settings from ${t}... (does it exist?)`),r}const n=r.directories.length;return n?o.succeed(`Found ${n} directories to process...`):o.fail("Found no directories to process..."),r}(o),n=r.directories;delete r.directories,r&&n&&(await async function(o,r){console.log(a.info,t.blue("Start packing all items...")),console.log(a.info,t.blue(`Clearing sounds directory (${r.targetDirectory})...`)),await e.mkdirp(r.targetDirectory);const n=await e.readdir(r.targetDirectory);await Promise.all(n.filter((t=>!1===t.includes(".gitignore"))).map((t=>e.remove(i.resolve(r.targetDirectory,t)))));for(const t of o)await b(t,r);console.log(a.success,t.green("Done packing all items..."))}(n,r),await async function(t,e){for(const o of t)await j(o,e)}(n,r))}function v(t){k(t||"assets.json")}export{v as pack};
